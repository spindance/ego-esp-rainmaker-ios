// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: avsconfig.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

enum Avs_AVSConfigStatus: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case success // = 0
    case invalidParam // = 1
    case invalidState // = 2
    case signedIn // = 3
    case signedOut // = 4
    case UNRECOGNIZED(Int)

    init() {
        self = .success
    }

    init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .success
        case 1: self = .invalidParam
        case 2: self = .invalidState
        case 3: self = .signedIn
        case 4: self = .signedOut
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    var rawValue: Int {
        switch self {
        case .success: return 0
        case .invalidParam: return 1
        case .invalidState: return 2
        case .signedIn: return 3
        case .signedOut: return 4
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

    extension Avs_AVSConfigStatus: CaseIterable {
        // The compiler won't synthesize support with the UNRECOGNIZED case.
        static var allCases: [Avs_AVSConfigStatus] = [
            .success,
            .invalidParam,
            .invalidState,
            .signedIn,
            .signedOut,
        ]
    }

#endif // swift(>=4.2)

enum Avs_AVSConfigMsgType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case typeCmdGetDetails // = 0
    case typeRespGetDetails // = 1
    case typeCmdSetConfig // = 2
    case typeRespSetConfig // = 3
    case typeCmdSignInStatus // = 4
    case typeRespSignInStatus // = 5
    case typeCmdSignOut // = 6
    case typeRespSignOut // = 7
    case UNRECOGNIZED(Int)

    init() {
        self = .typeCmdGetDetails
    }

    init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .typeCmdGetDetails
        case 1: self = .typeRespGetDetails
        case 2: self = .typeCmdSetConfig
        case 3: self = .typeRespSetConfig
        case 4: self = .typeCmdSignInStatus
        case 5: self = .typeRespSignInStatus
        case 6: self = .typeCmdSignOut
        case 7: self = .typeRespSignOut
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    var rawValue: Int {
        switch self {
        case .typeCmdGetDetails: return 0
        case .typeRespGetDetails: return 1
        case .typeCmdSetConfig: return 2
        case .typeRespSetConfig: return 3
        case .typeCmdSignInStatus: return 4
        case .typeRespSignInStatus: return 5
        case .typeCmdSignOut: return 6
        case .typeRespSignOut: return 7
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

    extension Avs_AVSConfigMsgType: CaseIterable {
        // The compiler won't synthesize support with the UNRECOGNIZED case.
        static var allCases: [Avs_AVSConfigMsgType] = [
            .typeCmdGetDetails,
            .typeRespGetDetails,
            .typeCmdSetConfig,
            .typeRespSetConfig,
            .typeCmdSignInStatus,
            .typeRespSignInStatus,
            .typeCmdSignOut,
            .typeRespSignOut,
        ]
    }

#endif // swift(>=4.2)

struct Avs_CmdGetDetails {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var dummy: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Avs_RespGetDetails {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var status: Avs_AVSConfigStatus = .success

    var version = String()

    var codeChallenge = String()

    var dsn = String()

    var productID = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Avs_CmdSetConfig {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var authCode = String()

    var clientID = String()

    var redirectUri = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Avs_RespSetConfig {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var status: Avs_AVSConfigStatus = .success

    var dummy: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Avs_CmdSignInStatus {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var dummy: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Avs_RespSignInStatus {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var status: Avs_AVSConfigStatus = .success

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Avs_CmdSignOut {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var dummy: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Avs_RespSignOut {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var status: Avs_AVSConfigStatus = .success

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Avs_AVSConfigPayload {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var msg: Avs_AVSConfigMsgType {
        get { return _storage._msg }
        set { _uniqueStorage()._msg = newValue }
    }

    var payload: OneOf_Payload? {
        get { return _storage._payload }
        set { _uniqueStorage()._payload = newValue }
    }

    var cmdGetDetails: Avs_CmdGetDetails {
        get {
            if case let .cmdGetDetails(v)? = _storage._payload { return v }
            return Avs_CmdGetDetails()
        }
        set { _uniqueStorage()._payload = .cmdGetDetails(newValue) }
    }

    var respGetDetails: Avs_RespGetDetails {
        get {
            if case let .respGetDetails(v)? = _storage._payload { return v }
            return Avs_RespGetDetails()
        }
        set { _uniqueStorage()._payload = .respGetDetails(newValue) }
    }

    var cmdSetConfig: Avs_CmdSetConfig {
        get {
            if case let .cmdSetConfig(v)? = _storage._payload { return v }
            return Avs_CmdSetConfig()
        }
        set { _uniqueStorage()._payload = .cmdSetConfig(newValue) }
    }

    var respSetConfig: Avs_RespSetConfig {
        get {
            if case let .respSetConfig(v)? = _storage._payload { return v }
            return Avs_RespSetConfig()
        }
        set { _uniqueStorage()._payload = .respSetConfig(newValue) }
    }

    var cmdSigninStatus: Avs_CmdSignInStatus {
        get {
            if case let .cmdSigninStatus(v)? = _storage._payload { return v }
            return Avs_CmdSignInStatus()
        }
        set { _uniqueStorage()._payload = .cmdSigninStatus(newValue) }
    }

    var respSigninStatus: Avs_RespSignInStatus {
        get {
            if case let .respSigninStatus(v)? = _storage._payload { return v }
            return Avs_RespSignInStatus()
        }
        set { _uniqueStorage()._payload = .respSigninStatus(newValue) }
    }

    var cmdSignOut: Avs_CmdSignOut {
        get {
            if case let .cmdSignOut(v)? = _storage._payload { return v }
            return Avs_CmdSignOut()
        }
        set { _uniqueStorage()._payload = .cmdSignOut(newValue) }
    }

    var respSignOut: Avs_RespSignOut {
        get {
            if case let .respSignOut(v)? = _storage._payload { return v }
            return Avs_RespSignOut()
        }
        set { _uniqueStorage()._payload = .respSignOut(newValue) }
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Payload: Equatable {
        case cmdGetDetails(Avs_CmdGetDetails)
        case respGetDetails(Avs_RespGetDetails)
        case cmdSetConfig(Avs_CmdSetConfig)
        case respSetConfig(Avs_RespSetConfig)
        case cmdSigninStatus(Avs_CmdSignInStatus)
        case respSigninStatus(Avs_RespSignInStatus)
        case cmdSignOut(Avs_CmdSignOut)
        case respSignOut(Avs_RespSignOut)

        #if !swift(>=4.1)
            static func == (lhs: Avs_AVSConfigPayload.OneOf_Payload, rhs: Avs_AVSConfigPayload.OneOf_Payload) -> Bool {
                switch (lhs, rhs) {
                case let (.cmdGetDetails(l), .cmdGetDetails(r)): return l == r
                case let (.respGetDetails(l), .respGetDetails(r)): return l == r
                case let (.cmdSetConfig(l), .cmdSetConfig(r)): return l == r
                case let (.respSetConfig(l), .respSetConfig(r)): return l == r
                case let (.cmdSigninStatus(l), .cmdSigninStatus(r)): return l == r
                case let (.respSigninStatus(l), .respSigninStatus(r)): return l == r
                case let (.cmdSignOut(l), .cmdSignOut(r)): return l == r
                case let (.respSignOut(l), .respSignOut(r)): return l == r
                default: return false
                }
            }
        #endif
    }

    init() {}

    private var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "avs"

extension Avs_AVSConfigStatus: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "Success"),
        1: .same(proto: "InvalidParam"),
        2: .same(proto: "InvalidState"),
        3: .same(proto: "SignedIn"),
        4: .same(proto: "SignedOut"),
    ]
}

extension Avs_AVSConfigMsgType: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "TypeCmdGetDetails"),
        1: .same(proto: "TypeRespGetDetails"),
        2: .same(proto: "TypeCmdSetConfig"),
        3: .same(proto: "TypeRespSetConfig"),
        4: .same(proto: "TypeCmdSignInStatus"),
        5: .same(proto: "TypeRespSignInStatus"),
        6: .same(proto: "TypeCmdSignOut"),
        7: .same(proto: "TypeRespSignOut"),
    ]
}

extension Avs_CmdGetDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".CmdGetDetails"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "Dummy"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularUInt32Field(value: &dummy)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if dummy != 0 {
            try visitor.visitSingularUInt32Field(value: dummy, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Avs_CmdGetDetails, rhs: Avs_CmdGetDetails) -> Bool {
        if lhs.dummy != rhs.dummy { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Avs_RespGetDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".RespGetDetails"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "Status"),
        2: .same(proto: "Version"),
        3: .same(proto: "CodeChallenge"),
        4: .same(proto: "DSN"),
        5: .same(proto: "ProductID"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularEnumField(value: &status)
            case 2: try decoder.decodeSingularStringField(value: &version)
            case 3: try decoder.decodeSingularStringField(value: &codeChallenge)
            case 4: try decoder.decodeSingularStringField(value: &dsn)
            case 5: try decoder.decodeSingularStringField(value: &productID)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if status != .success {
            try visitor.visitSingularEnumField(value: status, fieldNumber: 1)
        }
        if !version.isEmpty {
            try visitor.visitSingularStringField(value: version, fieldNumber: 2)
        }
        if !codeChallenge.isEmpty {
            try visitor.visitSingularStringField(value: codeChallenge, fieldNumber: 3)
        }
        if !dsn.isEmpty {
            try visitor.visitSingularStringField(value: dsn, fieldNumber: 4)
        }
        if !productID.isEmpty {
            try visitor.visitSingularStringField(value: productID, fieldNumber: 5)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Avs_RespGetDetails, rhs: Avs_RespGetDetails) -> Bool {
        if lhs.status != rhs.status { return false }
        if lhs.version != rhs.version { return false }
        if lhs.codeChallenge != rhs.codeChallenge { return false }
        if lhs.dsn != rhs.dsn { return false }
        if lhs.productID != rhs.productID { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Avs_CmdSetConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".CmdSetConfig"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "AuthCode"),
        2: .same(proto: "ClientID"),
        3: .same(proto: "RedirectURI"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &authCode)
            case 2: try decoder.decodeSingularStringField(value: &clientID)
            case 3: try decoder.decodeSingularStringField(value: &redirectUri)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !authCode.isEmpty {
            try visitor.visitSingularStringField(value: authCode, fieldNumber: 1)
        }
        if !clientID.isEmpty {
            try visitor.visitSingularStringField(value: clientID, fieldNumber: 2)
        }
        if !redirectUri.isEmpty {
            try visitor.visitSingularStringField(value: redirectUri, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Avs_CmdSetConfig, rhs: Avs_CmdSetConfig) -> Bool {
        if lhs.authCode != rhs.authCode { return false }
        if lhs.clientID != rhs.clientID { return false }
        if lhs.redirectUri != rhs.redirectUri { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Avs_RespSetConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".RespSetConfig"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "Status"),
        2: .same(proto: "Dummy"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularEnumField(value: &status)
            case 2: try decoder.decodeSingularUInt32Field(value: &dummy)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if status != .success {
            try visitor.visitSingularEnumField(value: status, fieldNumber: 1)
        }
        if dummy != 0 {
            try visitor.visitSingularUInt32Field(value: dummy, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Avs_RespSetConfig, rhs: Avs_RespSetConfig) -> Bool {
        if lhs.status != rhs.status { return false }
        if lhs.dummy != rhs.dummy { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Avs_CmdSignInStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".CmdSignInStatus"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "Dummy"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularUInt32Field(value: &dummy)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if dummy != 0 {
            try visitor.visitSingularUInt32Field(value: dummy, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Avs_CmdSignInStatus, rhs: Avs_CmdSignInStatus) -> Bool {
        if lhs.dummy != rhs.dummy { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Avs_RespSignInStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".RespSignInStatus"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "Status"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularEnumField(value: &status)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if status != .success {
            try visitor.visitSingularEnumField(value: status, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Avs_RespSignInStatus, rhs: Avs_RespSignInStatus) -> Bool {
        if lhs.status != rhs.status { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Avs_CmdSignOut: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".CmdSignOut"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "Dummy"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularUInt32Field(value: &dummy)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if dummy != 0 {
            try visitor.visitSingularUInt32Field(value: dummy, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Avs_CmdSignOut, rhs: Avs_CmdSignOut) -> Bool {
        if lhs.dummy != rhs.dummy { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Avs_RespSignOut: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".RespSignOut"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "Status"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularEnumField(value: &status)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if status != .success {
            try visitor.visitSingularEnumField(value: status, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Avs_RespSignOut, rhs: Avs_RespSignOut) -> Bool {
        if lhs.status != rhs.status { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Avs_AVSConfigPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".AVSConfigPayload"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "msg"),
        10: .standard(proto: "cmd_get_details"),
        11: .standard(proto: "resp_get_details"),
        12: .standard(proto: "cmd_set_config"),
        13: .standard(proto: "resp_set_config"),
        14: .standard(proto: "cmd_signin_status"),
        15: .standard(proto: "resp_signin_status"),
        16: .standard(proto: "cmd_sign_out"),
        17: .standard(proto: "resp_sign_out"),
    ]

    fileprivate class _StorageClass {
        var _msg: Avs_AVSConfigMsgType = .typeCmdGetDetails
        var _payload: Avs_AVSConfigPayload.OneOf_Payload?

        static let defaultInstance = _StorageClass()

        private init() {}

        init(copying source: _StorageClass) {
            _msg = source._msg
            _payload = source._payload
        }
    }

    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularEnumField(value: &_storage._msg)
                case 10:
                    var v: Avs_CmdGetDetails?
                    if let current = _storage._payload {
                        try decoder.handleConflictingOneOf()
                        if case let .cmdGetDetails(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v { _storage._payload = .cmdGetDetails(v) }
                case 11:
                    var v: Avs_RespGetDetails?
                    if let current = _storage._payload {
                        try decoder.handleConflictingOneOf()
                        if case let .respGetDetails(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v { _storage._payload = .respGetDetails(v) }
                case 12:
                    var v: Avs_CmdSetConfig?
                    if let current = _storage._payload {
                        try decoder.handleConflictingOneOf()
                        if case let .cmdSetConfig(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v { _storage._payload = .cmdSetConfig(v) }
                case 13:
                    var v: Avs_RespSetConfig?
                    if let current = _storage._payload {
                        try decoder.handleConflictingOneOf()
                        if case let .respSetConfig(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v { _storage._payload = .respSetConfig(v) }
                case 14:
                    var v: Avs_CmdSignInStatus?
                    if let current = _storage._payload {
                        try decoder.handleConflictingOneOf()
                        if case let .cmdSigninStatus(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v { _storage._payload = .cmdSigninStatus(v) }
                case 15:
                    var v: Avs_RespSignInStatus?
                    if let current = _storage._payload {
                        try decoder.handleConflictingOneOf()
                        if case let .respSigninStatus(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v { _storage._payload = .respSigninStatus(v) }
                case 16:
                    var v: Avs_CmdSignOut?
                    if let current = _storage._payload {
                        try decoder.handleConflictingOneOf()
                        if case let .cmdSignOut(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v { _storage._payload = .cmdSignOut(v) }
                case 17:
                    var v: Avs_RespSignOut?
                    if let current = _storage._payload {
                        try decoder.handleConflictingOneOf()
                        if case let .respSignOut(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v { _storage._payload = .respSignOut(v) }
                default: break
                }
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if _storage._msg != .typeCmdGetDetails {
                try visitor.visitSingularEnumField(value: _storage._msg, fieldNumber: 1)
            }
            switch _storage._payload {
            case let .cmdGetDetails(v)?:
                try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
            case let .respGetDetails(v)?:
                try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
            case let .cmdSetConfig(v)?:
                try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
            case let .respSetConfig(v)?:
                try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
            case let .cmdSigninStatus(v)?:
                try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
            case let .respSigninStatus(v)?:
                try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
            case let .cmdSignOut(v)?:
                try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
            case let .respSignOut(v)?:
                try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
            case nil: break
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Avs_AVSConfigPayload, rhs: Avs_AVSConfigPayload) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._msg != rhs_storage._msg { return false }
                if _storage._payload != rhs_storage._payload { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
