// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: esp_rmaker_user_mapping.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

enum Rainmaker_RMakerConfigStatus: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case success // = 0
    case invalidParam // = 1
    case invalidState // = 2
    case UNRECOGNIZED(Int)

    init() {
        self = .success
    }

    init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .success
        case 1: self = .invalidParam
        case 2: self = .invalidState
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    var rawValue: Int {
        switch self {
        case .success: return 0
        case .invalidParam: return 1
        case .invalidState: return 2
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

    extension Rainmaker_RMakerConfigStatus: CaseIterable {
        // The compiler won't synthesize support with the UNRECOGNIZED case.
        static var allCases: [Rainmaker_RMakerConfigStatus] = [
            .success,
            .invalidParam,
            .invalidState,
        ]
    }

#endif // swift(>=4.2)

enum Rainmaker_RMakerConfigMsgType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case typeCmdSetUserMapping // = 0
    case typeRespSetUserMapping // = 1
    case UNRECOGNIZED(Int)

    init() {
        self = .typeCmdSetUserMapping
    }

    init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .typeCmdSetUserMapping
        case 1: self = .typeRespSetUserMapping
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    var rawValue: Int {
        switch self {
        case .typeCmdSetUserMapping: return 0
        case .typeRespSetUserMapping: return 1
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

    extension Rainmaker_RMakerConfigMsgType: CaseIterable {
        // The compiler won't synthesize support with the UNRECOGNIZED case.
        static var allCases: [Rainmaker_RMakerConfigMsgType] = [
            .typeCmdSetUserMapping,
            .typeRespSetUserMapping,
        ]
    }

#endif // swift(>=4.2)

struct Rainmaker_CmdSetUserMapping {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var userID = String()

    var secretKey = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Rainmaker_RespSetUserMapping {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var status: Rainmaker_RMakerConfigStatus = .success

    var nodeID = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Rainmaker_RMakerConfigPayload {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var msg: Rainmaker_RMakerConfigMsgType {
        get { return _storage._msg }
        set { _uniqueStorage()._msg = newValue }
    }

    var payload: OneOf_Payload? {
        get { return _storage._payload }
        set { _uniqueStorage()._payload = newValue }
    }

    var cmdSetUserMapping: Rainmaker_CmdSetUserMapping {
        get {
            if case let .cmdSetUserMapping(v)? = _storage._payload { return v }
            return Rainmaker_CmdSetUserMapping()
        }
        set { _uniqueStorage()._payload = .cmdSetUserMapping(newValue) }
    }

    var respSetUserMapping: Rainmaker_RespSetUserMapping {
        get {
            if case let .respSetUserMapping(v)? = _storage._payload { return v }
            return Rainmaker_RespSetUserMapping()
        }
        set { _uniqueStorage()._payload = .respSetUserMapping(newValue) }
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Payload: Equatable {
        case cmdSetUserMapping(Rainmaker_CmdSetUserMapping)
        case respSetUserMapping(Rainmaker_RespSetUserMapping)

        #if !swift(>=4.1)
            static func == (lhs: Rainmaker_RMakerConfigPayload.OneOf_Payload, rhs: Rainmaker_RMakerConfigPayload.OneOf_Payload) -> Bool {
                switch (lhs, rhs) {
                case let (.cmdSetUserMapping(l), .cmdSetUserMapping(r)): return l == r
                case let (.respSetUserMapping(l), .respSetUserMapping(r)): return l == r
                default: return false
                }
            }
        #endif
    }

    init() {}

    private var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "rainmaker"

extension Rainmaker_RMakerConfigStatus: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "Success"),
        1: .same(proto: "InvalidParam"),
        2: .same(proto: "InvalidState"),
    ]
}

extension Rainmaker_RMakerConfigMsgType: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "TypeCmdSetUserMapping"),
        1: .same(proto: "TypeRespSetUserMapping"),
    ]
}

extension Rainmaker_CmdSetUserMapping: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".CmdSetUserMapping"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "UserID"),
        2: .same(proto: "SecretKey"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &userID)
            case 2: try decoder.decodeSingularStringField(value: &secretKey)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !userID.isEmpty {
            try visitor.visitSingularStringField(value: userID, fieldNumber: 1)
        }
        if !secretKey.isEmpty {
            try visitor.visitSingularStringField(value: secretKey, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Rainmaker_CmdSetUserMapping, rhs: Rainmaker_CmdSetUserMapping) -> Bool {
        if lhs.userID != rhs.userID { return false }
        if lhs.secretKey != rhs.secretKey { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Rainmaker_RespSetUserMapping: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".RespSetUserMapping"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "Status"),
        2: .same(proto: "NodeId"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularEnumField(value: &status)
            case 2: try decoder.decodeSingularStringField(value: &nodeID)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if status != .success {
            try visitor.visitSingularEnumField(value: status, fieldNumber: 1)
        }
        if !nodeID.isEmpty {
            try visitor.visitSingularStringField(value: nodeID, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Rainmaker_RespSetUserMapping, rhs: Rainmaker_RespSetUserMapping) -> Bool {
        if lhs.status != rhs.status { return false }
        if lhs.nodeID != rhs.nodeID { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Rainmaker_RMakerConfigPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".RMakerConfigPayload"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "msg"),
        10: .standard(proto: "cmd_set_user_mapping"),
        11: .standard(proto: "resp_set_user_mapping"),
    ]

    fileprivate class _StorageClass {
        var _msg: Rainmaker_RMakerConfigMsgType = .typeCmdSetUserMapping
        var _payload: Rainmaker_RMakerConfigPayload.OneOf_Payload?

        static let defaultInstance = _StorageClass()

        private init() {}

        init(copying source: _StorageClass) {
            _msg = source._msg
            _payload = source._payload
        }
    }

    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularEnumField(value: &_storage._msg)
                case 10:
                    var v: Rainmaker_CmdSetUserMapping?
                    if let current = _storage._payload {
                        try decoder.handleConflictingOneOf()
                        if case let .cmdSetUserMapping(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v { _storage._payload = .cmdSetUserMapping(v) }
                case 11:
                    var v: Rainmaker_RespSetUserMapping?
                    if let current = _storage._payload {
                        try decoder.handleConflictingOneOf()
                        if case let .respSetUserMapping(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v { _storage._payload = .respSetUserMapping(v) }
                default: break
                }
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if _storage._msg != .typeCmdSetUserMapping {
                try visitor.visitSingularEnumField(value: _storage._msg, fieldNumber: 1)
            }
            switch _storage._payload {
            case let .cmdSetUserMapping(v)?:
                try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
            case let .respSetUserMapping(v)?:
                try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
            case nil: break
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Rainmaker_RMakerConfigPayload, rhs: Rainmaker_RMakerConfigPayload) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._msg != rhs_storage._msg { return false }
                if _storage._payload != rhs_storage._payload { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
