// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: esp_rmaker_claim.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

enum RmakerClaim_RMakerClaimStatus: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case success // = 0
    case fail // = 1
    case invalidParam // = 2
    case invalidState // = 3
    case noMemory // = 4
    case UNRECOGNIZED(Int)

    init() {
        self = .success
    }

    init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .success
        case 1: self = .fail
        case 2: self = .invalidParam
        case 3: self = .invalidState
        case 4: self = .noMemory
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    var rawValue: Int {
        switch self {
        case .success: return 0
        case .fail: return 1
        case .invalidParam: return 2
        case .invalidState: return 3
        case .noMemory: return 4
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

    extension RmakerClaim_RMakerClaimStatus: CaseIterable {
        // The compiler won't synthesize support with the UNRECOGNIZED case.
        static var allCases: [RmakerClaim_RMakerClaimStatus] = [
            .success,
            .fail,
            .invalidParam,
            .invalidState,
            .noMemory,
        ]
    }

#endif // swift(>=4.2)

enum RmakerClaim_RMakerClaimMsgType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case typeCmdClaimStart // = 0
    case typeRespClaimStart // = 1
    case typeCmdClaimInit // = 2
    case typeRespClaimInit // = 3
    case typeCmdClaimVerify // = 4
    case typeRespClaimVerify // = 5
    case typeCmdClaimAbort // = 6
    case typeRespClaimAbort // = 7
    case UNRECOGNIZED(Int)

    init() {
        self = .typeCmdClaimStart
    }

    init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .typeCmdClaimStart
        case 1: self = .typeRespClaimStart
        case 2: self = .typeCmdClaimInit
        case 3: self = .typeRespClaimInit
        case 4: self = .typeCmdClaimVerify
        case 5: self = .typeRespClaimVerify
        case 6: self = .typeCmdClaimAbort
        case 7: self = .typeRespClaimAbort
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    var rawValue: Int {
        switch self {
        case .typeCmdClaimStart: return 0
        case .typeRespClaimStart: return 1
        case .typeCmdClaimInit: return 2
        case .typeRespClaimInit: return 3
        case .typeCmdClaimVerify: return 4
        case .typeRespClaimVerify: return 5
        case .typeCmdClaimAbort: return 6
        case .typeRespClaimAbort: return 7
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

    extension RmakerClaim_RMakerClaimMsgType: CaseIterable {
        // The compiler won't synthesize support with the UNRECOGNIZED case.
        static var allCases: [RmakerClaim_RMakerClaimMsgType] = [
            .typeCmdClaimStart,
            .typeRespClaimStart,
            .typeCmdClaimInit,
            .typeRespClaimInit,
            .typeCmdClaimVerify,
            .typeRespClaimVerify,
            .typeCmdClaimAbort,
            .typeRespClaimAbort,
        ]
    }

#endif // swift(>=4.2)

struct RmakerClaim_PayloadBuf {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var offset: UInt32 = 0

    var payload: Data = SwiftProtobuf.Internal.emptyData

    var totalLen: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct RmakerClaim_RespPayload {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var status: RmakerClaim_RMakerClaimStatus {
        get { return _storage._status }
        set { _uniqueStorage()._status = newValue }
    }

    var buf: RmakerClaim_PayloadBuf {
        get { return _storage._buf ?? RmakerClaim_PayloadBuf() }
        set { _uniqueStorage()._buf = newValue }
    }

    /// Returns true if `buf` has been explicitly set.
    var hasBuf: Bool { return _storage._buf != nil }
    /// Clears the value of `buf`. Subsequent reads from it will return its default value.
    mutating func clearBuf() { _uniqueStorage()._buf = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
}

struct RmakerClaim_RMakerClaimPayload {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var msg: RmakerClaim_RMakerClaimMsgType {
        get { return _storage._msg }
        set { _uniqueStorage()._msg = newValue }
    }

    var payload: OneOf_Payload? {
        get { return _storage._payload }
        set { _uniqueStorage()._payload = newValue }
    }

    var cmdPayload: RmakerClaim_PayloadBuf {
        get {
            if case let .cmdPayload(v)? = _storage._payload { return v }
            return RmakerClaim_PayloadBuf()
        }
        set { _uniqueStorage()._payload = .cmdPayload(newValue) }
    }

    var respPayload: RmakerClaim_RespPayload {
        get {
            if case let .respPayload(v)? = _storage._payload { return v }
            return RmakerClaim_RespPayload()
        }
        set { _uniqueStorage()._payload = .respPayload(newValue) }
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Payload: Equatable {
        case cmdPayload(RmakerClaim_PayloadBuf)
        case respPayload(RmakerClaim_RespPayload)

        #if !swift(>=4.1)
            static func == (lhs: RmakerClaim_RMakerClaimPayload.OneOf_Payload, rhs: RmakerClaim_RMakerClaimPayload.OneOf_Payload) -> Bool {
                switch (lhs, rhs) {
                case let (.cmdPayload(l), .cmdPayload(r)): return l == r
                case let (.respPayload(l), .respPayload(r)): return l == r
                default: return false
                }
            }
        #endif
    }

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "rmaker_claim"

extension RmakerClaim_RMakerClaimStatus: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "Success"),
        1: .same(proto: "Fail"),
        2: .same(proto: "InvalidParam"),
        3: .same(proto: "InvalidState"),
        4: .same(proto: "NoMemory"),
    ]
}

extension RmakerClaim_RMakerClaimMsgType: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "TypeCmdClaimStart"),
        1: .same(proto: "TypeRespClaimStart"),
        2: .same(proto: "TypeCmdClaimInit"),
        3: .same(proto: "TypeRespClaimInit"),
        4: .same(proto: "TypeCmdClaimVerify"),
        5: .same(proto: "TypeRespClaimVerify"),
        6: .same(proto: "TypeCmdClaimAbort"),
        7: .same(proto: "TypeRespClaimAbort"),
    ]
}

extension RmakerClaim_PayloadBuf: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".PayloadBuf"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "Offset"),
        2: .same(proto: "Payload"),
        3: .same(proto: "TotalLen"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularUInt32Field(value: &offset)
            case 2: try decoder.decodeSingularBytesField(value: &payload)
            case 3: try decoder.decodeSingularUInt32Field(value: &totalLen)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if offset != 0 {
            try visitor.visitSingularUInt32Field(value: offset, fieldNumber: 1)
        }
        if !payload.isEmpty {
            try visitor.visitSingularBytesField(value: payload, fieldNumber: 2)
        }
        if totalLen != 0 {
            try visitor.visitSingularUInt32Field(value: totalLen, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: RmakerClaim_PayloadBuf, rhs: RmakerClaim_PayloadBuf) -> Bool {
        if lhs.offset != rhs.offset { return false }
        if lhs.payload != rhs.payload { return false }
        if lhs.totalLen != rhs.totalLen { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension RmakerClaim_RespPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".RespPayload"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "Status"),
        2: .same(proto: "Buf"),
    ]

    fileprivate class _StorageClass {
        var _status: RmakerClaim_RMakerClaimStatus = .success
        var _buf: RmakerClaim_PayloadBuf?

        static let defaultInstance = _StorageClass()

        private init() {}

        init(copying source: _StorageClass) {
            _status = source._status
            _buf = source._buf
        }
    }

    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularEnumField(value: &_storage._status)
                case 2: try decoder.decodeSingularMessageField(value: &_storage._buf)
                default: break
                }
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if _storage._status != .success {
                try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 1)
            }
            if let v = _storage._buf {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: RmakerClaim_RespPayload, rhs: RmakerClaim_RespPayload) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._status != rhs_storage._status { return false }
                if _storage._buf != rhs_storage._buf { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension RmakerClaim_RMakerClaimPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".RMakerClaimPayload"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "msg"),
        10: .same(proto: "cmdPayload"),
        11: .same(proto: "respPayload"),
    ]

    fileprivate class _StorageClass {
        var _msg: RmakerClaim_RMakerClaimMsgType = .typeCmdClaimStart
        var _payload: RmakerClaim_RMakerClaimPayload.OneOf_Payload?

        static let defaultInstance = _StorageClass()

        private init() {}

        init(copying source: _StorageClass) {
            _msg = source._msg
            _payload = source._payload
        }
    }

    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularEnumField(value: &_storage._msg)
                case 10:
                    var v: RmakerClaim_PayloadBuf?
                    if let current = _storage._payload {
                        try decoder.handleConflictingOneOf()
                        if case let .cmdPayload(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v { _storage._payload = .cmdPayload(v) }
                case 11:
                    var v: RmakerClaim_RespPayload?
                    if let current = _storage._payload {
                        try decoder.handleConflictingOneOf()
                        if case let .respPayload(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v { _storage._payload = .respPayload(v) }
                default: break
                }
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if _storage._msg != .typeCmdClaimStart {
                try visitor.visitSingularEnumField(value: _storage._msg, fieldNumber: 1)
            }
            switch _storage._payload {
            case let .cmdPayload(v)?:
                try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
            case let .respPayload(v)?:
                try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
            case nil: break
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: RmakerClaim_RMakerClaimPayload, rhs: RmakerClaim_RMakerClaimPayload) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._msg != rhs_storage._msg { return false }
                if _storage._payload != rhs_storage._payload { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
